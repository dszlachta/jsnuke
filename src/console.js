(function(){

    window.Widget = window.Widget || {};

    window.Widget.Expand = function(parent, label, content) {

        var self = this;

        this.node = $('<div class="widget expand">')[0];
        this.contentNode = $('<ul class="content">')[0];

        this.expandTrigger = $('<button type="button">+</button>').on('click', function() {

            self.onExpand(self);
            self.toggle();

        });

        $(this.node).append(this.expandTrigger).append(label);

        this.populate(content);
        
        $(this.node).append(this.contentNode).appendTo(parent);
        
    };

    var P = window.Widget.Expand.prototype;
    P.onExpand = function(context) {};

    P.add = function(content) {

        var i = $('<li>');

        i.clone().append(content).appendTo(this.contentNode);

    };

    P.populate = function(content) {

        var self = this;

        if (_.isArray(content)) {

            content.forEach(function(value){

                self.add(value);

            });

        }
        else
            this.add(content);


    };

    P.show = function() {

        $(this.contentNode).show();
        return this.hide;

    };

    P.hide = function() {

        $(this.contentNode).hide();
        return this.show;

    };

    P.toggleProxy = P.hide;

    P.toggle = function() {

        this.toggleProxy = this.toggleProxy();

    };

    /* Console */

    var self = window.Console = {

        node: null,
        list: null,
        itemTemplate: null,

        prettyPrint: {

            output: function(className, o) {

                return ['<span class="'+ className +'">', o, '</span>'].join('');

            },

            /*
             * number(), string() and fn() methods are generated by
             * Console.init()
            */

           object: function(obj) {

               var name = (obj.toString()).match(/\[object (\w*)\]/)[1];
               
              _.each(obj, function(value, key){


              });

              return '<span class="object">' + name + '</span>';

           },

           fn: function(fn) {

                var data = fn.toString().match(/(\w*)(\([\w, ]*\))/),
                    fname = data[1] || 'function',
                    args = data[2];

                return this.output('function', fname + (' <code class="arguments">' + args + '</code>') );

           },

            check: function(something) {

                var pp = this,
                    output,
                    methods = [ pp.number, pp.string, pp.fn, pp.object ],
                    tests = [ 
                        (_.isNumber(Number(something)) && !_.isNaN(Number(something)) ),
                        _.isString(something),
                        (_.isFunction(something) && typeof something == 'function'),
                        (_.isObject(something) && typeof something != 'function'),
                    ];

                tests.forEach(function(value, index){

                    if ( value ) 
                        output = methods[index].call(pp, something);

                });

                return output || something;

            }            

        },

        insert: function(content) {

            var item = this.itemTemplate.cloneNode();

            item.innerHTML = content;

            $(this.list).prepend(item);

        },

        log: function(string) {

            this.insert(this.prettyPrint.check(string));

        },

        error: function(string) {

            this.log('Error: ' + string);

        },

        dir: function(obj) {

            _.each(obj, function(value, key) {

                

            });

        },

        init: function(selector) {

            this.node = document.querySelector(selector);
            this.list = document.createElement('ul');

            this.itemTemplate = document.createElement('li');

            /* Generate prettyPrint helper functions */
            var pp = this.prettyPrint;
            pp.number = _.bind(pp.output, pp, 'number');
            pp.string = _.bind(pp.output, pp, 'string');
            //pp.fn = _.bind(pp.output, pp, 'function');

            this.node.appendChild(this.list);

        }
        
    };


})();
