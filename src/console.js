(function(){

    var self = window.nuke.console = {

        node: null,
        list: null,
        itemTemplate: null,

        prettyPrint: {

            output: function(className, o) {

                return ['<span class="'+ className +'">', o, '</span>'].join('');

            },

            /*
             * number() and string() methods are generated by
             * Console.init()
            */

           object: function(obj) {

              var name = nuke.extract.fn(obj.constructor.toString()).name;

              return '<span class="object">' + name + '</span>';

           },

           fn: function(fn) {

                var data = nuke.extract.fn(fn.toString());

                return this.output('function', data.name + (' <code class="arguments">' + data.args + '</code>') );

           },

            check: function(something) {

                var pp = this,
                    output,
                    methods = [ pp.number, pp.string, pp.fn, pp.object ],
                    tests = [ 
                        (_.isNumber(Number(something)) && !_.isNaN(Number(something)) ),
                        _.isString(something),
                        (_.isFunction(something) && typeof something == 'function'),
                        (_.isObject(something) && typeof something != 'function'),
                    ],
                    l = tests.length;

                while(l--) {

                    if ( tests[l] ) {

                        output = methods[l].call(pp, something);
                        break;

                    }

                };

                return $(output)[0] || something;

            }            

        },

        insert: function(content) {

            var item = this.itemTemplate.cloneNode();

            if (content === undefined) 
                content = 'undefined';

            if (content instanceof Node) 
                item.appendChild(content);
            else
                item.textValue = content;

            var info = $('<p class="info">' + nuke.exec_time + 'ms</p>');

            $(item).append(info);

            $(this.list).prepend(item);

        },

        log: function(something) {

            if (_.isObject(something))
                this.dir(something);
            else
                this.insert(this.prettyPrint.check(something));

        },

        dir: function(object) {

            this.insert(new Widget.Inspector(object, undefined).node);

        },

        error: function(string) {

            this.log('Error: ' + string);

        },

        init: function(selector) {

            this.node = document.querySelector(selector);
            this.list = document.createElement('ul');

            this.itemTemplate = document.createElement('li');

            /* Generate prettyPrint helper functions */
            var pp = this.prettyPrint;
            pp.number = _.bind(pp.output, pp, 'number');
            pp.string = _.bind(pp.output, pp, 'string');
            //pp.fn = _.bind(pp.output, pp, 'function');

            this.node.appendChild(this.list);

        }
        
    };


})();
